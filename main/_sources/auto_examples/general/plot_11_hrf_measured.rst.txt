
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/general/plot_11_hrf_measured.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_general_plot_11_hrf_measured.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_general_plot_11_hrf_measured.py:


.. _tut-fnirs-hrf:

GLM Analysis (Measured)
============================

In this example we analyse data from a real multichannel
functional near-infrared spectroscopy (fNIRS)
experiment (see :ref:`tut-fnirs-hrf-sim` for a simplified simulated
analysis). The experiment consists of three conditions
1) tapping with the left hand,
2) tapping with the right hand,
3) a control condition where the participant does nothing.
We use a GLM analysis to examine the neural activity associated with
the different tapping conditions.
An alternative epoching style analysis on the same data can be
viewed in the
:ref:`waveform analysis example <tut-fnirs-processing>`.
See
`Luke et al (2021) <https://www.spiedigitallibrary.org/journals/neurophotonics/volume-8/issue-2/025008/Analysis-methods-for-measuring-passive-auditory-fNIRS-responses-generated-by/10.1117/1.NPh.8.2.025008.short>`_
for a comparison of the epoching and GLM approaches.

This GLM analysis is a wrapper over the excellent
`Nilearn GLM <http://nilearn.github.io/modules/reference.html#module-nilearn.glm>`_.

.. contents:: Page contents
   :local:
   :depth: 2

.. note:: Parts of this tutorial require the latest development version of MNE-Python. See these instructions for  
          `how to upgrade <https://mne.tools/dev/install/updating.html>`__.
          But basically boils down to running
          ``pip install -U --no-deps https://github.com/mne-tools/mne-python/archive/main.zip``.
          Sections of the code that require this version will be noted below.
          

.. GENERATED FROM PYTHON SOURCE LINES 37-59

.. code-block:: default

    # sphinx_gallery_thumbnail_number = 9

    # Authors: Robert Luke <mail@robertluke.net>
    #
    # License: BSD (3-clause)

    import os
    import numpy as np
    import matplotlib.pyplot as plt

    import mne
    import mne_nirs

    from mne_nirs.experimental_design import make_first_level_design_matrix
    from mne_nirs.statistics import run_glm
    from mne_nirs.channels import (get_long_channels,
                                   get_short_channels,
                                   picks_pair_to_idx)

    from nilearn.plotting import plot_design_matrix









.. GENERATED FROM PYTHON SOURCE LINES 60-81

Import raw NIRS data
--------------------

First we import the motor tapping data, these data are also
described and used in the
:ref:`MNE fNIRS tutorial <mne:tut-fnirs-processing>`

After reading the data we resample down to 1Hz
to meet github memory constraints.

.. collapse:: Data description (click to expand)
   :class: success

   Optodes were placed over the motor cortex using the standard NIRX motor
   montage, but with 8 short channels added (see their web page for details).
   To view the sensor locations run
   `raw_intensity.plot_sensors()`.
   A sound was presented to indicate which hand the participant should tap.
   Participants tapped their thumb to their fingers for 5s.
   Conditions were presented in a random order with a randomised inter
   stimulus interval.

.. GENERATED FROM PYTHON SOURCE LINES 81-88

.. code-block:: default


    fnirs_data_folder = mne.datasets.fnirs_motor.data_path()
    fnirs_raw_dir = os.path.join(fnirs_data_folder, 'Participant-1')
    raw_intensity = mne.io.read_raw_nirx(fnirs_raw_dir).load_data()
    raw_intensity.resample(0.7)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using default location ~/mne_data for fnirs_motor...
    Downloading archive MNE-fNIRS-motor-data.tgz to /home/runner/mne_data
    Downloading https://files.osf.io/v1/resources/rxvq7/providers/osfstorage/5dbf84a9cfc96c000ec957eb?version=1&action=download&direct (17.1 MB)
      0%|          | Downloading : 0.00/17.1M [00:00<?,        ?B/s]      0%|          | Downloading : 56.0k/17.1M [00:00<00:12,    1.41MB/s]      1%|          | Downloading : 88.0k/17.1M [00:00<00:22,     791kB/s]      1%|          | Downloading : 120k/17.1M [00:00<00:19,     922kB/s]       1%|          | Downloading : 152k/17.1M [00:00<00:17,    1.03MB/s]      1%|1         | Downloading : 184k/17.1M [00:00<00:16,    1.10MB/s]      1%|1         | Downloading : 216k/17.1M [00:00<00:15,    1.17MB/s]      1%|1         | Downloading : 248k/17.1M [00:00<00:14,    1.24MB/s]      2%|1         | Downloading : 312k/17.1M [00:00<00:12,    1.41MB/s]      2%|2         | Downloading : 408k/17.1M [00:00<00:10,    1.73MB/s]      3%|3         | Downloading : 536k/17.1M [00:00<00:08,    2.11MB/s]      4%|3         | Downloading : 664k/17.1M [00:00<00:07,    2.44MB/s]      5%|4         | Downloading : 856k/17.1M [00:00<00:05,    2.95MB/s]      6%|6         | Downloading : 1.09M/17.1M [00:00<00:04,    3.65MB/s]      8%|7         | Downloading : 1.34M/17.1M [00:00<00:03,    4.35MB/s]      9%|9         | Downloading : 1.59M/17.1M [00:00<00:03,    4.99MB/s]     11%|#         | Downloading : 1.84M/17.1M [00:00<00:02,    5.57MB/s]     15%|#5        | Downloading : 2.59M/17.1M [00:00<00:02,    7.57MB/s]     18%|#8        | Downloading : 3.09M/17.1M [00:00<00:01,    8.88MB/s]     24%|##3       | Downloading : 4.09M/17.1M [00:00<00:01,    11.4MB/s]     30%|##9       | Downloading : 5.09M/17.1M [00:00<00:00,    13.8MB/s]     36%|###5      | Downloading : 6.09M/17.1M [00:00<00:00,    16.2MB/s]     47%|####7     | Downloading : 8.09M/17.1M [00:00<00:00,    20.6MB/s]     53%|#####3    | Downloading : 9.09M/17.1M [00:00<00:00,    22.2MB/s]     65%|######5   | Downloading : 11.1M/17.1M [00:00<00:00,    25.9MB/s]     71%|#######   | Downloading : 12.1M/17.1M [00:00<00:00,    27.1MB/s]     77%|#######6  | Downloading : 13.1M/17.1M [00:00<00:00,    28.3MB/s]     88%|########8 | Downloading : 15.1M/17.1M [00:00<00:00,    30.9MB/s]     94%|#########4| Downloading : 16.1M/17.1M [00:00<00:00,    32.0MB/s]    100%|##########| Downloading : 17.1M/17.1M [00:00<00:00,    33.2MB/s]    100%|##########| Downloading : 17.1M/17.1M [00:00<00:00,    23.6MB/s]
    Verifying hash c4935d19ddab35422a69f3326a01fef8.
    Decompressing the archive: /home/runner/mne_data/MNE-fNIRS-motor-data.tgz
    (please be patient, this can take some time)
    Successfully extracted to: ['/home/runner/mne_data/MNE-fNIRS-motor-data']
    Loading /home/runner/mne_data/MNE-fNIRS-motor-data/Participant-1
    Reading 0 ... 23238  =      0.000 ...  2974.464 secs...


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">


    <table class="table table-hover">
        <tr>
            <th>Measurement date</th>
            <td>November 02, 2019  13:16:16 GMT</td>
        
        </tr>
        <tr>
            <th>Experimenter</th>
    <td>Unknown</td>
        </tr>
            <th>Participant</th>
                <td>P1</td>
        
        </tr>
        <tr>
            <th>Digitized points</th>
            <td>31 points</td>
        </tr>
        <tr>
            <th>Good channels</th>
            <td>0 magnetometer, 0 gradiometer,
                0 EEG channels, and 56 fNIRS channels.</td>
        </tr>
        <tr>
            <th>Bad channels</th>
            <td></td>
        
        </tr>
        <tr>
            <th>EOG channels</th>
            <td>Not available</td>
        </tr>
        <tr>
            <th>ECG channels</th>
            <td>Not available</td>
        <tr>
            <th>Sampling frequency</th>
            <td>0.70 Hz</td>
        </tr>
        <tr>
            <th>Highpass</th>
            <td>0.00 Hz</td>
        </tr>
        <tr>
            <th>Lowpass</th>
            <td>0.35 Hz</td>
        </tr>

        <tr>
            <th>Filenames</th>
            <td>Participant-1</td>
        </tr>
        <tr>
            <th>Duration</th>
            <td>00:49:32 (HH:MM:SS)</td>
        </tr>
    </table>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 89-102

Clean up annotations before analysis
------------------------------------

.. sidebar:: Requires MNE-Python development version

   This section of code requires the latest development version of MNE-Python.
   See instructions at the top of the page on how to upgrade.
   Alternatively you can use the more cumbersome version of the code as shown
   `in the old documentation <https://github.com/mne-tools/mne-nirs/blob/38de21c2f172bd15c6e8c53d66fc462a57e9f3e1/examples/general/plot_11_hrf_measured.py#L92-L104>`__.

Next we update the annotations by assigning names to each trigger ID.
Then we crop the recording to the section containing our
experimental conditions.

.. GENERATED FROM PYTHON SOURCE LINES 102-110

.. code-block:: default


    raw_intensity.annotations.rename({'1.0': 'Control',
                                      '2.0': 'Tapping/Left',
                                      '3.0': 'Tapping/Right'})
    raw_intensity.annotations.delete(raw_intensity.annotations.description == '15.0')
    raw_intensity.annotations.set_durations(5)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <Annotations | 90 segments: Control (30), Tapping/Left (30), Tapping/Right ...>



.. GENERATED FROM PYTHON SOURCE LINES 111-114

Preprocess NIRS data
--------------------
Next we convert the raw data to haemoglobin concentration.

.. GENERATED FROM PYTHON SOURCE LINES 114-119

.. code-block:: default


    raw_od = mne.preprocessing.nirs.optical_density(raw_intensity)
    raw_haemo = mne.preprocessing.nirs.beer_lambert_law(raw_od)









.. GENERATED FROM PYTHON SOURCE LINES 120-129

.. sidebar:: Relevant literature

   Tachtsidis, Ilias, and Felix Scholkmann. "False positives and false
   negatives in functional near-infrared spectroscopy: issues, challenges,
   and the way forward." Neurophotonics 3.3 (2016): 031405.

We then split the data in to
short channels which predominantly contain systemic responses and
long channels which have both neural and systemic contributions.

.. GENERATED FROM PYTHON SOURCE LINES 130-135

.. code-block:: default


    short_chs = get_short_channels(raw_haemo)
    raw_haemo = get_long_channels(raw_haemo)









.. GENERATED FROM PYTHON SOURCE LINES 136-145

View experiment events
----------------------

Next we examine the timing and order of events in this experiment.
There are several options for how to view event information.
The first option is to use MNE's plot events command.
Here each dot represents when an event started.
We observe that the order of conditions was randomised and the time between
events is also randomised.

.. GENERATED FROM PYTHON SOURCE LINES 145-150

.. code-block:: default


    events, event_dict = mne.events_from_annotations(raw_haemo, verbose=False)
    mne.viz.plot_events(events, event_id=event_dict, sfreq=raw_haemo.info['sfreq'])





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_001.png
   :alt: plot 11 hrf measured
   :srcset: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <Figure size 640x480 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 151-154

The previous plot did not illustrate the duration that an event lasted for.
Alternatively, we can view the experiment using a boxcar plot, where the
line is raised for the duration of the stimulus/condition.

.. GENERATED FROM PYTHON SOURCE LINES 155-163

.. code-block:: default


    s = mne_nirs.experimental_design.create_boxcar(raw_haemo)
    fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(15, 6))
    plt.plot(raw_haemo.times, s, axes=axes)
    plt.legend(["Control", "Left", "Right"], loc="upper right")
    plt.xlabel("Time (s)");





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_002.png
   :alt: plot 11 hrf measured
   :srcset: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Used Annotations descriptions: ['Control', 'Tapping/Left', 'Tapping/Right']

    Text(0.5, 36.72222222222221, 'Time (s)')



.. GENERATED FROM PYTHON SOURCE LINES 164-185

Create design matrix
--------------------

.. sidebar:: Relevant literature

   For further discussion on design matrices see
   the Nilearn examples. Specifically the 
   `first level model example <http://nilearn.github.io/auto_examples/04_glm_first_level/plot_first_level_details.html>`_.

Next we create a model to fit our data to.
The model consists of various components to model different things we assume
contribute to the measured signal.
We model the expected neural response for each experimental condition
using the SPM haemodynamic response
function (HRF) combined with the known stimulus event times and durations
(as described above).
We also include a cosine drift model with components up to the high pass
parameter value. See the nilearn documentation for recommendations on setting
these values. In short, they suggest `"The cutoff period (1/high_pass) should be
set as the longest period between two trials of the same condition multiplied by 2.
For instance, if the longest period is 32s, the high_pass frequency shall be 1/64 Hz ~ 0.016 Hz"`.

.. GENERATED FROM PYTHON SOURCE LINES 185-193

.. code-block:: default


    design_matrix = make_first_level_design_matrix(raw_haemo,
                                                   drift_model='cosine',
                                                   high_pass=0.005,  # Must be specified per experiment
                                                   hrf_model='spm',
                                                   stim_dur=5.0)









.. GENERATED FROM PYTHON SOURCE LINES 194-199

We also add the mean of the short channels to the design matrix.
In theory these channels contain only systemic components, so including
them in the design matrix allows us to estimate the neural component
related to each experimental condition
uncontaminated by systemic effects.

.. GENERATED FROM PYTHON SOURCE LINES 200-208

.. code-block:: default


    design_matrix["ShortHbO"] = np.mean(short_chs.copy().pick(
                                        picks="hbo").get_data(), axis=0)

    design_matrix["ShortHbR"] = np.mean(short_chs.copy().pick(
                                        picks="hbr").get_data(), axis=0)









.. GENERATED FROM PYTHON SOURCE LINES 209-215

And we display a summary of the design matrix
using standard Nilearn reporting functions.
The first three columns represent the SPM HRF convolved with our stimulus
event information.
The next columns illustrate the drift and constant components.
The last columns illustrate the short channel signals.

.. GENERATED FROM PYTHON SOURCE LINES 216-221

.. code-block:: default


    fig, ax1 = plt.subplots(figsize=(10, 6), nrows=1, ncols=1)
    fig = plot_design_matrix(design_matrix, ax=ax1)





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_003.png
   :alt: plot 11 hrf measured
   :srcset: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 222-240

Examine expected response
-------------------------

The matrices above can be a bit abstract as they encompase multiple 
conditions and regressors.
Instead we can examine a single condition.
Here we observe the boxcar function for a single condition,
this illustrates when the stimulus was active.
We also view the expected neural response using the HRF specified above,
we observe that each time a stimulus is presented there is an expected
brain response that lags the stimulus onset and consists of a large positive
component followed by an undershoot.

In this example the second trigger (index 1) corresponds to the ``Tapping/Left``
condition in the design matrix, so we plot those below. In your data the mapping
may be different, so you may need to alter either the ``s`` index or condition
name. Note however, that this is just for visualisation and does not affect
the results below.

.. GENERATED FROM PYTHON SOURCE LINES 240-250

.. code-block:: default


    s = mne_nirs.experimental_design.create_boxcar(raw_intensity, stim_dur=5.0)
    plt.plot(raw_intensity.times, s[:, 1])
    plt.plot(design_matrix['Tapping/Left'])
    plt.xlim(180, 300)
    plt.legend(["Stimulus", "Expected Response"])
    plt.xlabel("Time (s)")
    plt.ylabel("Amplitude")





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_004.png
   :alt: plot 11 hrf measured
   :srcset: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Used Annotations descriptions: ['Control', 'Tapping/Left', 'Tapping/Right']

    Text(42.722222222222214, 0.5, 'Amplitude')



.. GENERATED FROM PYTHON SOURCE LINES 251-263

Fit GLM to subset of data and estimate response for each experimental condition
-------------------------------------------------------------------------------

.. sidebar:: Relevant literature

   Huppert TJ. Commentary on the statistical properties of noise and its
   implication on general linear models in functional near-infrared
   spectroscopy. Neurophotonics. 2016;3(1)

We run a GLM fit for the data and experiment matrix.
First we analyse just the first two channels which correspond to HbO and HbR
of a single source detector pair.

.. GENERATED FROM PYTHON SOURCE LINES 264-268

.. code-block:: default


    data_subset = raw_haemo.copy().pick(picks=range(2))
    glm_est = run_glm(data_subset, design_matrix)








.. GENERATED FROM PYTHON SOURCE LINES 269-272

This returns a GLM regression estimate for each channel.
This data is stored in a dedicated type.
You can view an overview of the estimates by addressing the variable:

.. GENERATED FROM PYTHON SOURCE LINES 273-276

.. code-block:: default


    glm_est





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    GLM Results for 2 channels



.. GENERATED FROM PYTHON SOURCE LINES 277-282

As with other MNE types you can use the `pick` function.
To query the mean square error of a single channel you would call.

Note: as we wish to retain both channels for further the analysis below,
we operate on a copy to demonstrate this channel picking functionality.

.. GENERATED FROM PYTHON SOURCE LINES 283-286

.. code-block:: default


    glm_est.copy().pick('S1_D1 hbr')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    GLM Results for 1 channels



.. GENERATED FROM PYTHON SOURCE LINES 287-292

Underlying the data for each channel is a standard
`Nilearn RegressionResults object <https://nilearn.github.io/modules/generated/nilearn.glm.RegressionResults.html>`_
object. These objects are rich with information that can be requested
from the object, for example to determine the mean square error of the
estimates for two channels you would call:

.. GENERATED FROM PYTHON SOURCE LINES 293-296

.. code-block:: default


    glm_est.MSE()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [3.6359501281260763e-11, 9.482010775760916e-12]



.. GENERATED FROM PYTHON SOURCE LINES 297-300

And we can chain the methods to quickly access required details.
For example, to determine the MSE for channel `S1` `D1` for the hbr type
you would call:

.. GENERATED FROM PYTHON SOURCE LINES 301-305

.. code-block:: default


    glm_est.copy().pick('S1_D1 hbr').MSE()






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [9.482010775760916e-12]



.. GENERATED FROM PYTHON SOURCE LINES 306-311

Due to the richness of the objects we provide a function to
extract commonly used information and put it in a convenient dataframe/table.
Below this is demonstrated and then we just display the first 9 rows of the
table which correspond to the 9 components of the design matrix for the
first channel.

.. GENERATED FROM PYTHON SOURCE LINES 312-315

.. code-block:: default


    glm_est.to_dataframe().head(9)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>variable</th>
          <th>ch_name</th>
          <th>Condition</th>
          <th>df</th>
          <th>mse</th>
          <th>p_value</th>
          <th>se</th>
          <th>t</th>
          <th>theta</th>
          <th>Source</th>
          <th>Detector</th>
          <th>Chroma</th>
          <th>Significant</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>S1_D1 hbo</td>
          <td>Control</td>
          <td>35.0</td>
          <td>3.635950e-11</td>
          <td>5.703922e-01</td>
          <td>1.271854e-06</td>
          <td>0.572874</td>
          <td>7.286122e-07</td>
          <td>1</td>
          <td>1</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th>1</th>
          <td>S1_D1 hbo</td>
          <td>ShortHbO</td>
          <td>35.0</td>
          <td>3.635950e-11</td>
          <td>5.988346e-39</td>
          <td>1.253564e-02</td>
          <td>68.802806</td>
          <td>8.624875e-01</td>
          <td>1</td>
          <td>1</td>
          <td>hbo</td>
          <td>True</td>
        </tr>
        <tr>
          <th>2</th>
          <td>S1_D1 hbo</td>
          <td>ShortHbR</td>
          <td>35.0</td>
          <td>3.635950e-11</td>
          <td>2.051290e-19</td>
          <td>7.976514e-02</td>
          <td>-18.187656</td>
          <td>-1.450741e+00</td>
          <td>1</td>
          <td>1</td>
          <td>hbo</td>
          <td>True</td>
        </tr>
        <tr>
          <th>3</th>
          <td>S1_D1 hbo</td>
          <td>Tapping/Left</td>
          <td>35.0</td>
          <td>3.635950e-11</td>
          <td>8.464418e-06</td>
          <td>1.289978e-06</td>
          <td>5.211297</td>
          <td>6.722461e-06</td>
          <td>1</td>
          <td>1</td>
          <td>hbo</td>
          <td>True</td>
        </tr>
        <tr>
          <th>4</th>
          <td>S1_D1 hbo</td>
          <td>Tapping/Right</td>
          <td>35.0</td>
          <td>3.635950e-11</td>
          <td>7.547857e-16</td>
          <td>1.294997e-06</td>
          <td>13.935896</td>
          <td>1.804694e-05</td>
          <td>1</td>
          <td>1</td>
          <td>hbo</td>
          <td>True</td>
        </tr>
        <tr>
          <th>5</th>
          <td>S1_D1 hbo</td>
          <td>constant</td>
          <td>35.0</td>
          <td>3.635950e-11</td>
          <td>5.227182e-02</td>
          <td>2.943860e-07</td>
          <td>-2.009249</td>
          <td>-5.914949e-07</td>
          <td>1</td>
          <td>1</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th>6</th>
          <td>S1_D1 hbo</td>
          <td>drift_1</td>
          <td>35.0</td>
          <td>3.635950e-11</td>
          <td>6.333101e-25</td>
          <td>3.084314e-05</td>
          <td>26.818114</td>
          <td>8.271549e-04</td>
          <td>1</td>
          <td>1</td>
          <td>hbo</td>
          <td>True</td>
        </tr>
        <tr>
          <th>7</th>
          <td>S1_D1 hbo</td>
          <td>drift_10</td>
          <td>35.0</td>
          <td>3.635950e-11</td>
          <td>8.211815e-07</td>
          <td>1.215036e-05</td>
          <td>5.979676</td>
          <td>7.265522e-05</td>
          <td>1</td>
          <td>1</td>
          <td>hbo</td>
          <td>True</td>
        </tr>
        <tr>
          <th>8</th>
          <td>S1_D1 hbo</td>
          <td>drift_11</td>
          <td>35.0</td>
          <td>3.635950e-11</td>
          <td>4.069713e-01</td>
          <td>1.242152e-05</td>
          <td>0.839347</td>
          <td>1.042596e-05</td>
          <td>1</td>
          <td>1</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 316-323

We then display the results using the scatter plot function.
Note that the control condition sits
around zero
and that the HbO is positive and larger than the HbR, this is to be expected.
Further, we note that for this channel the response to tapping on the
right hand is larger than the left. And the values are similar to what
is seen in the epoching tutorial.

.. GENERATED FROM PYTHON SOURCE LINES 324-328

.. code-block:: default


    glm_est.scatter()





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_005.png
   :alt: plot 11 hrf measured
   :srcset: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <AxesSubplot:xlabel='Condition', ylabel='Theta'>



.. GENERATED FROM PYTHON SOURCE LINES 329-338

Fit GLM to all data and view topographic distribution
-----------------------------------------------------

Lastly we can run the GLM analysis on all sensors and plot the result on a
topomap.
We see the same result as in the MNE tutorial,
that activation is largest
contralateral to the tapping side. Also note that HbR tends to be the
negative of HbO as expected.

.. GENERATED FROM PYTHON SOURCE LINES 338-343

.. code-block:: default


    glm_est = run_glm(raw_haemo, design_matrix)
    glm_est.plot_topo(conditions=['Tapping/Left', 'Tapping/Right'])





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_006.png
   :alt: Tapping/Left, Tapping/Right, Tapping/Left, Tapping/Right
   :srcset: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <Figure size 1200x700 with 6 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 344-363

Note that the topographic visualisation is a high level representation
of the underlying data. This visual representation fits a smoothed surface
to the data and makes many assumptions including that the data is
spatially smooth and that the sensors sufficiently cover the scalp surface.
These assumptions can be violated with fNIRS due to the improved spatial
sensitivity (relative to EEG) and typically low number of sensors that are
unevenly distributed over the scalp.
As such, researchers should understand the underlying data and ensure that
the figure accurately reflects the effect of interest.

As an example of how the topoplot can be deceiving, we replot
the `Tapping/Right` condition from above for each hemisphere
separately. When both hemisphere are plotted together (left),
the function smooths
the large space between sensors, making the activity on the left hemisphere
smear towards the center and appear larger than the underlying data shows.
When each hemisphere is plotted independently (right) it becomes immediately
apparent that the data does not indicate that activity spreads across
the center of the head.

.. GENERATED FROM PYTHON SOURCE LINES 364-379

.. code-block:: default


    fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(10, 6), gridspec_kw=dict(width_ratios=[0.92, 1]))

    glm_hbo = glm_est.copy().pick(picks="hbo")
    conditions = ['Tapping/Right']

    glm_hbo.plot_topo(axes=axes[0], colorbar=False, conditions=conditions)

    glm_hbo.copy().pick(picks=range(10)).plot_topo(conditions=conditions, axes=axes[1], colorbar=False, vmin=-16, vmax=16)
    glm_hbo.copy().pick(picks=range(10, 20)).plot_topo(conditions=conditions, axes=axes[1], colorbar=False, vmin=-16, vmax=16)

    axes[0].set_title("Smoothed across hemispheres")
    axes[1].set_title("Hemispheres plotted independently")





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_007.png
   :alt: Smoothed across hemispheres, Hemispheres plotted independently
   :srcset: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'Hemispheres plotted independently')



.. GENERATED FROM PYTHON SOURCE LINES 380-382

Another way to view the data is to project the GLM estimates to the nearest
cortical surface

.. GENERATED FROM PYTHON SOURCE LINES 383-387

.. code-block:: default


    glm_est.copy().surface_projection(condition="Tapping/Right", view="dorsal", chroma="hbo")





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_008.png
   :alt: plot 11 hrf measured
   :srcset: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/mne_nirs-0.1.1.dev0-py3.9.egg/mne_nirs/statistics/_glm_level_first.py:492: SettingWithCopyWarning: 
    A value is trying to be set on a copy of a slice from a DataFrame.
    Try using .loc[row_indexer,col_indexer] = value instead

    See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
      df["theta"] = df["theta"] * 1e6

    <mne.viz._brain._brain.Brain object at 0x7f32e6519ee0>



.. GENERATED FROM PYTHON SOURCE LINES 388-407

Analyse regions of interest
---------------------------

.. sidebar:: Relevant literature

   Zimeo Morais, G.A., Balardin, J.B. & Sato, J.R.
   fNIRS Optodes’ Location Decider (fOLD): a toolbox for probe arrangement
   guided by brain regions-of-interest. Sci Rep 8, 3341 (2018).

   Shader and Luke et al. "The use of broad vs restricted regions of
   interest in functional near-infrared spectroscopy for measuring cortical
   activation to auditory-only and visual-only speech."
   Hearing Research (2021): `108256 <https://www.sciencedirect.com/science/article/pii/S0378595521000903>`_.

Or alternatively we can summarise the responses across regions of interest
for each condition. And you can plot it with your favorite software.
Region of interest analysis can be more robust than single channel analysis.
The fOLD toolbox can be used to assist in the design of ROIs.
And consideration should be paid to ensure optimal size ROIs are selected.

.. GENERATED FROM PYTHON SOURCE LINES 407-421

.. code-block:: default


    left = [[1, 1], [1, 2], [1, 3], [2, 1], [2, 3],
            [2, 4], [3, 2], [3, 3], [4, 3], [4, 4]]
    right = [[5, 5], [5, 6], [5, 7], [6, 5], [6, 7],
             [6, 8], [7, 6], [7, 7], [8, 7], [8, 8]]

    groups = dict(Left_ROI=picks_pair_to_idx(raw_haemo, left),
                  Right_ROI=picks_pair_to_idx(raw_haemo, right))

    conditions = ['Control', 'Tapping/Left', 'Tapping/Right']

    df = glm_est.to_dataframe_region_of_interest(groups, conditions)









.. GENERATED FROM PYTHON SOURCE LINES 422-425

As with the single channel results above, this is placed in a tidy dataframe
which contains conveniently extracted information, but now for the region
of interest.

.. GENERATED FROM PYTHON SOURCE LINES 425-429

.. code-block:: default


    df







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>ROI</th>
          <th>Condition</th>
          <th>Chroma</th>
          <th>theta</th>
          <th>se</th>
          <th>t</th>
          <th>dfe</th>
          <th>p</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>Left_ROI</td>
          <td>Control</td>
          <td>hbo</td>
          <td>-1.690850e-07</td>
          <td>0.906548</td>
          <td>-0.186515</td>
          <td>35.0</td>
          <td>8.531176e-01</td>
        </tr>
        <tr>
          <th>1</th>
          <td>Left_ROI</td>
          <td>Control</td>
          <td>hbr</td>
          <td>1.621215e-07</td>
          <td>0.510929</td>
          <td>0.317307</td>
          <td>35.0</td>
          <td>7.528959e-01</td>
        </tr>
        <tr>
          <th>2</th>
          <td>Right_ROI</td>
          <td>Control</td>
          <td>hbo</td>
          <td>3.814778e-08</td>
          <td>0.941335</td>
          <td>0.040525</td>
          <td>35.0</td>
          <td>9.679047e-01</td>
        </tr>
        <tr>
          <th>3</th>
          <td>Right_ROI</td>
          <td>Control</td>
          <td>hbr</td>
          <td>-1.034544e-07</td>
          <td>0.532735</td>
          <td>-0.194195</td>
          <td>35.0</td>
          <td>8.471461e-01</td>
        </tr>
        <tr>
          <th>0</th>
          <td>Left_ROI</td>
          <td>Tapping/Left</td>
          <td>hbo</td>
          <td>4.808888e-06</td>
          <td>0.919870</td>
          <td>5.227791</td>
          <td>35.0</td>
          <td>8.051619e-06</td>
        </tr>
        <tr>
          <th>1</th>
          <td>Left_ROI</td>
          <td>Tapping/Left</td>
          <td>hbr</td>
          <td>-1.837941e-06</td>
          <td>0.518407</td>
          <td>-3.545361</td>
          <td>35.0</td>
          <td>1.136272e-03</td>
        </tr>
        <tr>
          <th>2</th>
          <td>Right_ROI</td>
          <td>Tapping/Left</td>
          <td>hbo</td>
          <td>9.219006e-06</td>
          <td>0.955125</td>
          <td>9.652143</td>
          <td>35.0</td>
          <td>2.123476e-11</td>
        </tr>
        <tr>
          <th>3</th>
          <td>Right_ROI</td>
          <td>Tapping/Left</td>
          <td>hbr</td>
          <td>-3.877839e-06</td>
          <td>0.540531</td>
          <td>-7.174123</td>
          <td>35.0</td>
          <td>2.280434e-08</td>
        </tr>
        <tr>
          <th>0</th>
          <td>Left_ROI</td>
          <td>Tapping/Right</td>
          <td>hbo</td>
          <td>9.738244e-06</td>
          <td>0.922471</td>
          <td>10.556691</td>
          <td>35.0</td>
          <td>2.015806e-12</td>
        </tr>
        <tr>
          <th>1</th>
          <td>Left_ROI</td>
          <td>Tapping/Right</td>
          <td>hbr</td>
          <td>-3.240867e-06</td>
          <td>0.519857</td>
          <td>-6.234145</td>
          <td>35.0</td>
          <td>3.799977e-07</td>
        </tr>
        <tr>
          <th>2</th>
          <td>Right_ROI</td>
          <td>Tapping/Right</td>
          <td>hbo</td>
          <td>5.997574e-06</td>
          <td>0.957747</td>
          <td>6.262169</td>
          <td>35.0</td>
          <td>3.491383e-07</td>
        </tr>
        <tr>
          <th>3</th>
          <td>Right_ROI</td>
          <td>Tapping/Right</td>
          <td>hbr</td>
          <td>-2.408893e-06</td>
          <td>0.542023</td>
          <td>-4.444261</td>
          <td>35.0</td>
          <td>8.484410e-05</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 430-438

Compute contrasts
-----------------

We can also define a contrast as described in
`Nilearn docs <http://nilearn.github.io/auto_examples/04_glm_first_level/plot_localizer_surface_analysis.html>`_
and plot it.
Here we contrast the response to tapping on the left hand with the response
from tapping on the right hand.

.. GENERATED FROM PYTHON SOURCE LINES 439-449

.. code-block:: default


    contrast_matrix = np.eye(design_matrix.shape[1])
    basic_conts = dict([(column, contrast_matrix[i])
                       for i, column in enumerate(design_matrix.columns)])
    contrast_LvR = basic_conts['Tapping/Left'] - basic_conts['Tapping/Right']

    contrast = glm_est.compute_contrast(contrast_LvR)
    contrast.plot_topo()





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_009.png
   :alt: Oxyhaemoglobin, Deoxyhaemoglobin
   :srcset: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_009.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <Figure size 1200x700 with 3 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 450-464

Export Results
---------------

.. sidebar:: Relevant literature

   Wickham, Hadley. "Tidy data." Journal of Statistical Software 59.10 (2014): 1-23.

Here we export the data in a tidy pandas data frame.
We export the GLM results for every channel and condition.
Data is exported in long format by default.
However, a helper function is also provided to convert the long data to wide format.
The long to wide conversion also adds some additional derived data, such as
if a significant response (p<0.05) was observed, which sensor and detector is
in the channel, which chroma, etc.

.. GENERATED FROM PYTHON SOURCE LINES 464-468

.. code-block:: default


    df = glm_est.to_dataframe()









.. GENERATED FROM PYTHON SOURCE LINES 469-476

Determine true and false positive rates
---------------------------------------

We can query the exported data frames to determine the true and false
positive rates. Note: optodes cover a greater region than just the
motor cortex, so we dont expect 100% of channels to detect responses to
the tapping, but we do expect 5% or less for the false positive rate.

.. GENERATED FROM PYTHON SOURCE LINES 476-483

.. code-block:: default


    (df
     .query('Condition in ["Control", "Tapping/Left", "Tapping/Right"]')
     .groupby(['Condition', 'Chroma'])
     .agg(['mean'])
     .drop(['df', 'mse', 'p_value', 't'], 1)
     )





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead tr th {
            text-align: left;
        }

        .dataframe thead tr:last-of-type th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr>
          <th></th>
          <th>variable</th>
          <th>se</th>
          <th>theta</th>
          <th>Source</th>
          <th>Detector</th>
          <th>Significant</th>
        </tr>
        <tr>
          <th></th>
          <th></th>
          <th>mean</th>
          <th>mean</th>
          <th>mean</th>
          <th>mean</th>
          <th>mean</th>
        </tr>
        <tr>
          <th>Condition</th>
          <th>Chroma</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th rowspan="2" valign="top">Control</th>
          <th>hbo</th>
          <td>1.054770e-06</td>
          <td>-1.599538e-07</td>
          <td>5.561117e+17</td>
          <td>6.156712e+17</td>
          <td>0.00</td>
        </tr>
        <tr>
          <th>hbr</th>
          <td>5.952317e-07</td>
          <td>-1.648622e-08</td>
          <td>5.561117e+17</td>
          <td>6.156712e+17</td>
          <td>0.00</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">Tapping/Left</th>
          <th>hbo</th>
          <td>1.070265e-06</td>
          <td>6.881075e-06</td>
          <td>5.561117e+17</td>
          <td>6.156712e+17</td>
          <td>0.90</td>
        </tr>
        <tr>
          <th>hbr</th>
          <td>6.039312e-07</td>
          <td>-2.958917e-06</td>
          <td>5.561117e+17</td>
          <td>6.156712e+17</td>
          <td>0.75</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">Tapping/Right</th>
          <th>hbo</th>
          <td>1.073288e-06</td>
          <td>7.809773e-06</td>
          <td>5.561117e+17</td>
          <td>6.156712e+17</td>
          <td>0.95</td>
        </tr>
        <tr>
          <th>hbr</th>
          <td>6.055956e-07</td>
          <td>-2.910487e-06</td>
          <td>5.561117e+17</td>
          <td>6.156712e+17</td>
          <td>0.80</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  27.591 seconds)

**Estimated memory usage:**  461 MB


.. _sphx_glr_download_auto_examples_general_plot_11_hrf_measured.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/rob-luke/mne-nirs-docker/main?filepath=examples/mne-nirs-website-examples/auto_examples/general/plot_11_hrf_measured.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_11_hrf_measured.py <plot_11_hrf_measured.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_11_hrf_measured.ipynb <plot_11_hrf_measured.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
