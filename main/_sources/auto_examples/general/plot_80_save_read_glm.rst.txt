
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/general/plot_80_save_read_glm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_general_plot_80_save_read_glm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_general_plot_80_save_read_glm.py:


.. _tut-glm-save:

Save and load GLM results
=========================

This is an example of how to save and load
functional near-infrared spectroscopy (fNIRS)
GLM results from analysis in MNE-NIRS.
As computation can be expensive and time consuming it can be useful
to store computed results to disk, so that you can query the results later.
For example, to remake a figure or answer a new scientific question.

For a description of the analysis in this tutorial see the
:ref:`MNE-NIRS individual GLM tutorial <tut-fnirs-hrf>` and
:ref:`MNE-NIRS group GLM tutorial <tut-fnirs-group>`.
This tutorial will simply focus on saving and loading data.

The data used in this example is available
`at this location <https://github.com/rob-luke/BIDS-NIRS-Tapping>`_.
It is a finger tapping example and is briefly described below.
The dataset contains 5 participants.
The example dataset is in
`BIDS <https://bids.neuroimaging.io>`_
format and therefore already contains
information about triggers, condition names, etc.

.. note::

   The BIDS specification for NIRS data is still under development. See:
   `fNIRS BIDS proposal <https://github.com/bids-standard/bids-specification/pull/802>`_.
   As such, you must use the development branch of MNE-BIDS.

   To install the fNIRS development branch of MNE-BIDS run:
   `pip install https://codeload.github.com/rob-luke/mne-bids/zip/nirs`

.. contents:: Page contents
   :local:
   :depth: 2

.. GENERATED FROM PYTHON SOURCE LINES 41-62

.. code-block:: default

    # Authors: Robert Luke <mail@robertluke.net>
    #
    # License: BSD (3-clause)

    # Import common libraries
    from os.path import join
    import pandas as pd

    # Import MNE functions
    from mne.preprocessing.nirs import optical_density, beer_lambert_law

    # Import MNE-NIRS functions
    from mne_nirs.statistics import run_glm
    from mne_nirs.experimental_design import make_first_level_design_matrix
    from mne_nirs.statistics import read_glm
    from mne_nirs.datasets import fnirs_motor_group

    # Import MNE-BIDS processing
    from mne_bids import BIDSPath, read_raw_bids, get_entity_vals









.. GENERATED FROM PYTHON SOURCE LINES 63-72

Set up directories
------------------

First we will define where the raw data is stored. We will analyse a
BIDS dataset, note that the BIDS specification for NIRS data is still
under development and you will need to install the development branch
as described above.

We first define the root directory of our dataset.

.. GENERATED FROM PYTHON SOURCE LINES 72-77

.. code-block:: default


    root = fnirs_motor_group.data_path()
    print(root)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/mne_data/MNE-fNIRS-motor-group-data/




.. GENERATED FROM PYTHON SOURCE LINES 78-80

And as we are using MNE-BIDS we can create a BIDSPath.
This helps to handle all the path wrangling.

.. GENERATED FROM PYTHON SOURCE LINES 80-85

.. code-block:: default


    dataset = BIDSPath(root=root, task="tapping")
    print(dataset.directory)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/mne_data/MNE-fNIRS-motor-group-data




.. GENERATED FROM PYTHON SOURCE LINES 86-87

For example we can automatically query the subjects, tasks, and sessions.

.. GENERATED FROM PYTHON SOURCE LINES 87-92

.. code-block:: default


    subjects = get_entity_vals(root, 'subject')
    print(subjects)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ['01', '02', '03', '04', '05']




.. GENERATED FROM PYTHON SOURCE LINES 93-94

But for this example we will only process the first two subjects

.. GENERATED FROM PYTHON SOURCE LINES 94-97

.. code-block:: default

    subjects = subjects[:2]









.. GENERATED FROM PYTHON SOURCE LINES 98-105

Define individual analysis
--------------------------

First we define the analysis that will be applied to each file.
This is a GLM analysis as described in the
:ref:`individual GLM tutorial <tut-fnirs-hrf>`,
so this example will skim over the individual level details.

.. GENERATED FROM PYTHON SOURCE LINES 105-118

.. code-block:: default



    def individual_analysis(bids_path):

        raw_intensity = read_raw_bids(bids_path=bids_path, verbose=False)
        raw_intensity.pick(picks=range(20)).crop(200).resample(0.3)  # Reduce load
        raw_haemo = beer_lambert_law(optical_density(raw_intensity))
        design_matrix = make_first_level_design_matrix(raw_haemo)
        glm_est = run_glm(raw_haemo, design_matrix)

        return glm_est









.. GENERATED FROM PYTHON SOURCE LINES 119-124

Run analysis and save to disk
-----------------------------

Next we loop through the five measurements and run the individual analysis
on each. We will then save the GLM results to disk as ``.h5`` files.

.. GENERATED FROM PYTHON SOURCE LINES 124-151

.. code-block:: default



    for sub in subjects:

        # Create path to file based on experiment info
        data_path = dataset.update(subject=sub,
                                   datatype="nirs",
                                   suffix="nirs",
                                   extension=".snirf")

        # Analyse data and glm results
        glm = individual_analysis(data_path)

        # Next we create a location to store the results.
        # In BIDS fashion we will store this in a subdirectory called derivatives.
        # And we can use the BIDSPath type from above to handle the path details.

        save_path = dataset.copy().update(
            root=join(root, "derivatives"),
            datatype="nirs", suffix="glm", extension=".h5",check=False)
        # Ensure the folder exists, and make it if not.
        save_path.fpath.parent.mkdir(exist_ok=True, parents=True)

        # Finally we save the results to disk as a hdf5 file
        glm.save(save_path.fpath, overwrite=True)









.. GENERATED FROM PYTHON SOURCE LINES 152-156

Reload results and extract summary statistics
---------------------------------------------

Next we loop through the five measurements and reload all the results.

.. GENERATED FROM PYTHON SOURCE LINES 156-178

.. code-block:: default


    # Create a dataframe to store results
    df = pd.DataFrame()

    for sub in subjects:

        # Point to the correct subject
        save_path = save_path.update(subject=sub)

        # Read the data
        results = read_glm(save_path)

        # Extract results from data as dataframe
        individual_results = results.to_dataframe()

        # Indicate the subject ID
        individual_results["ID"] = sub

        # Append individual results to larger dataframe
        df = df.append(individual_results)









.. GENERATED FROM PYTHON SOURCE LINES 179-184

View the resulting dataframe
----------------------------

Finally we can view the resulting dataframe which contains data from all
subjects.

.. GENERATED FROM PYTHON SOURCE LINES 184-186

.. code-block:: default


    df





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>variable</th>
          <th>ch_name</th>
          <th>Condition</th>
          <th>df</th>
          <th>mse</th>
          <th>p_value</th>
          <th>se</th>
          <th>t</th>
          <th>theta</th>
          <th>Source</th>
          <th>Detector</th>
          <th>Chroma</th>
          <th>Significant</th>
          <th>ID</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>S1_D1 hbo</td>
          <td>Control</td>
          <td>59.0</td>
          <td>2.167281e-10</td>
          <td>4.479019e-01</td>
          <td>0.000012</td>
          <td>-0.764017</td>
          <td>-9.134550e-06</td>
          <td>1</td>
          <td>1</td>
          <td>hbo</td>
          <td>False</td>
          <td>01</td>
        </tr>
        <tr>
          <th>1</th>
          <td>S1_D1 hbo</td>
          <td>Tapping/Left</td>
          <td>59.0</td>
          <td>2.167281e-10</td>
          <td>1.000203e-03</td>
          <td>0.000011</td>
          <td>-3.463145</td>
          <td>-3.961956e-05</td>
          <td>1</td>
          <td>1</td>
          <td>hbo</td>
          <td>True</td>
          <td>01</td>
        </tr>
        <tr>
          <th>2</th>
          <td>S1_D1 hbo</td>
          <td>Tapping/Right</td>
          <td>59.0</td>
          <td>2.167281e-10</td>
          <td>1.199381e-01</td>
          <td>0.000012</td>
          <td>-1.577889</td>
          <td>-1.841376e-05</td>
          <td>1</td>
          <td>1</td>
          <td>hbo</td>
          <td>False</td>
          <td>01</td>
        </tr>
        <tr>
          <th>3</th>
          <td>S1_D1 hbo</td>
          <td>constant</td>
          <td>59.0</td>
          <td>2.167281e-10</td>
          <td>3.425794e-01</td>
          <td>0.000001</td>
          <td>0.956786</td>
          <td>9.951093e-07</td>
          <td>1</td>
          <td>1</td>
          <td>hbo</td>
          <td>False</td>
          <td>01</td>
        </tr>
        <tr>
          <th>4</th>
          <td>S1_D1 hbo</td>
          <td>drift_1</td>
          <td>59.0</td>
          <td>2.167281e-10</td>
          <td>1.885009e-10</td>
          <td>0.000029</td>
          <td>7.682699</td>
          <td>2.256664e-04</td>
          <td>1</td>
          <td>1</td>
          <td>hbo</td>
          <td>True</td>
          <td>01</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>955</th>
          <td>S3_D3 hbr</td>
          <td>drift_5</td>
          <td>48.0</td>
          <td>2.776094e-11</td>
          <td>4.856250e-01</td>
          <td>0.000007</td>
          <td>-0.702719</td>
          <td>-4.939315e-06</td>
          <td>3</td>
          <td>3</td>
          <td>hbr</td>
          <td>False</td>
          <td>02</td>
        </tr>
        <tr>
          <th>956</th>
          <td>S3_D3 hbr</td>
          <td>drift_6</td>
          <td>48.0</td>
          <td>2.776094e-11</td>
          <td>1.482543e-02</td>
          <td>0.000007</td>
          <td>2.527754</td>
          <td>1.775594e-05</td>
          <td>3</td>
          <td>3</td>
          <td>hbr</td>
          <td>True</td>
          <td>02</td>
        </tr>
        <tr>
          <th>957</th>
          <td>S3_D3 hbr</td>
          <td>drift_7</td>
          <td>48.0</td>
          <td>2.776094e-11</td>
          <td>8.546343e-03</td>
          <td>0.000007</td>
          <td>-2.742418</td>
          <td>-1.930285e-05</td>
          <td>3</td>
          <td>3</td>
          <td>hbr</td>
          <td>True</td>
          <td>02</td>
        </tr>
        <tr>
          <th>958</th>
          <td>S3_D3 hbr</td>
          <td>drift_8</td>
          <td>48.0</td>
          <td>2.776094e-11</td>
          <td>8.645516e-02</td>
          <td>0.000007</td>
          <td>-1.750308</td>
          <td>-1.229204e-05</td>
          <td>3</td>
          <td>3</td>
          <td>hbr</td>
          <td>False</td>
          <td>02</td>
        </tr>
        <tr>
          <th>959</th>
          <td>S3_D3 hbr</td>
          <td>drift_9</td>
          <td>48.0</td>
          <td>2.776094e-11</td>
          <td>1.712016e-03</td>
          <td>0.000007</td>
          <td>3.322597</td>
          <td>2.334883e-05</td>
          <td>3</td>
          <td>3</td>
          <td>hbr</td>
          <td>True</td>
          <td>02</td>
        </tr>
      </tbody>
    </table>
    <p>2140 rows × 13 columns</p>
    </div>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  8.452 seconds)

**Estimated memory usage:**  15 MB


.. _sphx_glr_download_auto_examples_general_plot_80_save_read_glm.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/rob-luke/mne-nirs-docker/main?filepath=examples/mne-nirs-website-examples/auto_examples/general/plot_80_save_read_glm.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_80_save_read_glm.py <plot_80_save_read_glm.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_80_save_read_glm.ipynb <plot_80_save_read_glm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
