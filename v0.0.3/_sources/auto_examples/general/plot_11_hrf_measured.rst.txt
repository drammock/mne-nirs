
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/general/plot_11_hrf_measured.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_general_plot_11_hrf_measured.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_general_plot_11_hrf_measured.py:


.. _tut-fnirs-hrf:

GLM Analysis (Measured)
============================

In this example we analyse data from a real multichannel
functional near-infrared spectroscopy (fNIRS)
experiment (see :ref:`tut-fnirs-hrf-sim` for a simplified simulated
analysis). The experiment consists of three conditions
1) tapping with the left hand,
2) tapping with the right hand,
3) a control condition where the participant does nothing.
We use a GLM analysis to examine the neural activity associated with
the different tapping conditions.
An alternative epoching style analysis on the same data can be
viewed in the
:ref:`MNE documentation <mne:tut-fnirs-processing>`.

This GLM analysis is a wrapper over the excellent
`Nilearn GLM <http://nilearn.github.io/modules/reference.html#module-nilearn.glm>`_.

.. contents:: Page contents
   :local:
   :depth: 2

.. GENERATED FROM PYTHON SOURCE LINES 28-52

.. code-block:: default

    # sphinx_gallery_thumbnail_number = 8

    # Authors: Robert Luke <mail@robertluke.net>
    #
    # License: BSD (3-clause)

    import os
    import numpy as np
    import pandas as pd
    import matplotlib.pyplot as plt

    import mne
    import mne_nirs

    from mne_nirs.experimental_design import make_first_level_design_matrix
    from mne_nirs.statistics import run_GLM, glm_region_of_interest
    from mne_nirs.visualisation import plot_glm_topo
    from mne_nirs.channels import (get_long_channels, get_short_channels,
                                   picks_pair_to_idx)

    from nilearn.plotting import plot_design_matrix
    from mne_nirs.utils._io import glm_to_tidy









.. GENERATED FROM PYTHON SOURCE LINES 53-74

Import raw NIRS data
--------------------

First we import the motor tapping data, these data are also
described and used in the
:ref:`MNE fNIRS tutorial <mne:tut-fnirs-processing>`

After reading the data we resample down to 1Hz
to meet github memory constraints.

.. collapse:: Data description (click to expand)
   :class: success

   Optodes were placed over the motor cortex using the standard NIRX motor
   montage, but with 8 short channels added (see their web page for details).
   To view the sensor locations run
   `raw_intensity.plot_sensors()`.
   A sound was presented to indicate which hand the participant should tap.
   Participants tapped their thumb to their fingers for 5s.
   Conditions were presented in a random order with a randomised inter
   stimulus interval.

.. GENERATED FROM PYTHON SOURCE LINES 74-81

.. code-block:: default


    fnirs_data_folder = mne.datasets.fnirs_motor.data_path()
    fnirs_raw_dir = os.path.join(fnirs_data_folder, 'Participant-1')
    raw_intensity = mne.io.read_raw_nirx(fnirs_raw_dir).load_data()
    raw_intensity.resample(0.7)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Loading /home/runner/mne_data/MNE-fNIRS-motor-data/Participant-1
    Reading 0 ... 23238  =      0.000 ...  2974.464 secs...


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">


    <table class="table table-hover">
        <tr>
            <th>Measurement date</th>
            <td>November 02, 2019  13:16:16 GMT</td>
        
        </tr>
        <tr>
            <th>Experimenter</th>
    <td>Unknown</td>
        </tr>
            <th>Participant</th>
                <td>P1</td>
        
        </tr>
        <tr>
            <th>Digitized points</th>
            <td>31 points</td>
        </tr>
        <tr>
            <th>Good channels</th>
            <td>0 magnetometer, 0 gradiometer,
                0 EEG channels, and 56 fNIRS channels.</td>
        </tr>
        <tr>
            <th>Bad channels</th>
            <td></td>
        
        </tr>
        <tr>
            <th>EOG channels</th>
            <td>Not available</td>
        </tr>
        <tr>
            <th>ECG channels</th>
            <td>Not available</td>
        <tr>
            <th>Sampling frequency</th>
            <td>0.70 Hz</td>
        </tr>
        <tr>
            <th>Highpass</th>
            <td>0.00 Hz</td>
        </tr>
        <tr>
            <th>Lowpass</th>
            <td>0.35 Hz</td>
        </tr>

        <tr>
            <th>Filenames</th>
            <td>Participant-1</td>
        </tr>
        <tr>
            <th>Duration</th>
            <td>00:49:32 (HH:MM:SS)</td>
        </tr>
    </table>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 82-88

Clean up annotations before analysis
------------------------------------

Next we update the annotations by assigning names to each trigger ID.
Then we crop the recording to the section containing our
experimental conditions.

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default


    original_annotations = raw_intensity.annotations
    new_des = [des for des in raw_intensity.annotations.description]
    new_des = ['Control' if x == "1.0" else x for x in new_des]
    new_des = ['Tapping/Left' if x == "2.0" else x for x in new_des]
    new_des = ['Tapping/Right' if x == "3.0" else x for x in new_des]
    keepers = [n == 'Control' or
               n == "Tapping/Left" or
               n == "Tapping/Right" for n in new_des]
    idxs = np.array(np.where(keepers)[0])
    annot = mne.Annotations(original_annotations.onset[idxs],
                            original_annotations.duration[idxs] * 5., 
                            np.array([new_des[idx] for idx in np.where(keepers)[0]]))
    raw_intensity.set_annotations(annot)







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">


    <table class="table table-hover">
        <tr>
            <th>Measurement date</th>
            <td>November 02, 2019  13:16:16 GMT</td>
        
        </tr>
        <tr>
            <th>Experimenter</th>
    <td>Unknown</td>
        </tr>
            <th>Participant</th>
                <td>P1</td>
        
        </tr>
        <tr>
            <th>Digitized points</th>
            <td>31 points</td>
        </tr>
        <tr>
            <th>Good channels</th>
            <td>0 magnetometer, 0 gradiometer,
                0 EEG channels, and 56 fNIRS channels.</td>
        </tr>
        <tr>
            <th>Bad channels</th>
            <td></td>
        
        </tr>
        <tr>
            <th>EOG channels</th>
            <td>Not available</td>
        </tr>
        <tr>
            <th>ECG channels</th>
            <td>Not available</td>
        <tr>
            <th>Sampling frequency</th>
            <td>0.70 Hz</td>
        </tr>
        <tr>
            <th>Highpass</th>
            <td>0.00 Hz</td>
        </tr>
        <tr>
            <th>Lowpass</th>
            <td>0.35 Hz</td>
        </tr>

        <tr>
            <th>Filenames</th>
            <td>Participant-1</td>
        </tr>
        <tr>
            <th>Duration</th>
            <td>00:49:32 (HH:MM:SS)</td>
        </tr>
    </table>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 105-108

Preprocess NIRS data
--------------------
Next we convert the raw data to haemoglobin concentration.

.. GENERATED FROM PYTHON SOURCE LINES 108-113

.. code-block:: default


    raw_od = mne.preprocessing.nirs.optical_density(raw_intensity)
    raw_haemo = mne.preprocessing.nirs.beer_lambert_law(raw_od)









.. GENERATED FROM PYTHON SOURCE LINES 114-123

.. sidebar:: Relevant literature

   Tachtsidis, Ilias, and Felix Scholkmann. "False positives and false
   negatives in functional near-infrared spectroscopy: issues, challenges,
   and the way forward." Neurophotonics 3.3 (2016): 031405.

We then split the data in to
short channels which predominantly contain systemic responses and
long channels which have both neural and systemic contributions.

.. GENERATED FROM PYTHON SOURCE LINES 124-129

.. code-block:: default


    short_chs = get_short_channels(raw_haemo)
    raw_haemo = get_long_channels(raw_haemo)









.. GENERATED FROM PYTHON SOURCE LINES 130-139

View experiment events
----------------------

Next we examine the timing and order of events in this experiment.
There are several options for how to view event information.
The first option is to use MNE's plot events command.
Here each dot represents when an event started.
We observe that the order of conditions was randomised and the time between
events is also randomised.

.. GENERATED FROM PYTHON SOURCE LINES 139-146

.. code-block:: default


    events, _ = mne.events_from_annotations(raw_haemo, verbose=False)
    event_dict = {'Control': 1, 'Tapping/Left': 2, 'Tapping/Right': 3}
    mne.viz.plot_events(events, event_id=event_dict,
                        sfreq=raw_haemo.info['sfreq'])





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_001.png
   :alt: plot 11 hrf measured
   :srcset: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <Figure size 640x480 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 147-150

The previous plot did not illustrate the duration that an event lasted for.
Alternatively, we can view the experiment using a boxcar plot, where the
line is raised for the duration of the stimulus/condition.

.. GENERATED FROM PYTHON SOURCE LINES 151-159

.. code-block:: default


    s = mne_nirs.experimental_design.create_boxcar(raw_haemo)
    fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(15, 6))
    plt.plot(raw_haemo.times, s, axes=axes)
    plt.legend(["Control", "Left", "Right"], loc="upper right")
    plt.xlabel("Time (s)");





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_002.png
   :alt: plot 11 hrf measured
   :srcset: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Used Annotations descriptions: ['Control', 'Tapping/Left', 'Tapping/Right']

    Text(0.5, 36.72222222222221, 'Time (s)')



.. GENERATED FROM PYTHON SOURCE LINES 160-180

Create design matrix
--------------------

.. sidebar:: Relevant literature

   For further discussion on design matrices see
   the Nilearn examples. Specifically the 
   `first level model <http://nilearn.github.io/auto_examples/04_glm_first_level/plot_first_level_details.html>`_
   and 
   `design matrix examples <http://nilearn.github.io/auto_examples/04_glm_first_level/plot_design_matrix.html>`_.

Next we create a model to fit our data to.
The model consists of various components to model different things we assume
contribute to the measured signal.
We model the expected neural response for each experimental condition
using the SPM haemodynamic response
function (HRF) combined with the known stimulus event times and durations
(as described above).
We also include a third order polynomial drift and constant to model
slow fluctuations in the data and a constant DC shift.

.. GENERATED FROM PYTHON SOURCE LINES 180-187

.. code-block:: default


    design_matrix = make_first_level_design_matrix(raw_haemo,
                                                   hrf_model='spm', stim_dur=5.0,
                                                   drift_order=3,
                                                   drift_model='polynomial')









.. GENERATED FROM PYTHON SOURCE LINES 188-193

We also add the mean of the short channels to the design matrix.
In theory these channels contain only systemic components, so including
them in the design matrix allows us to estimate the neural component
related to each experimental condition
uncontaminated by systemic effects.

.. GENERATED FROM PYTHON SOURCE LINES 194-202

.. code-block:: default


    design_matrix["ShortHbO"] = np.mean(short_chs.copy().pick(
                                        picks="hbo").get_data(), axis=0)

    design_matrix["ShortHbR"] = np.mean(short_chs.copy().pick(
                                        picks="hbr").get_data(), axis=0)









.. GENERATED FROM PYTHON SOURCE LINES 203-209

And we display a summary of the design matrix
using standard Nilearn reporting functions.
The first three columns represent the SPM HRF convolved with our stimulus
event information.
The next columns illustrate the drift and constant components.
The last columns illustrate the short channel signals.

.. GENERATED FROM PYTHON SOURCE LINES 210-215

.. code-block:: default


    fig, ax1 = plt.subplots(figsize=(10, 6), nrows=1, ncols=1)
    fig = plot_design_matrix(design_matrix, ax=ax1)





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_003.png
   :alt: plot 11 hrf measured
   :srcset: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 216-228

Examine expected response
-------------------------

The matrices above can be a bit abstract as they encompase multiple 
conditions and regressors.
Instead we can examine a single condition.
Here we observe the boxcar function for a single condition,
this illustrates when the stimulus was active.
We also view the expected neural response using the HRF specified above,
we observe that each time a stimulus is presented there is an expected
brain response that lags the stimulus onset and consists of a large positive
component followed by an undershoot.

.. GENERATED FROM PYTHON SOURCE LINES 228-238

.. code-block:: default


    s = mne_nirs.experimental_design.create_boxcar(raw_intensity)
    plt.plot(raw_intensity.times, s[:, 1])
    plt.plot(design_matrix['Tapping/Left'])
    plt.xlim(180, 300)
    plt.legend(["Stimulus", "Expected Response"])
    plt.xlabel("Time (s)")
    plt.ylabel("Amplitude")





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_004.png
   :alt: plot 11 hrf measured
   :srcset: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Used Annotations descriptions: ['Control', 'Tapping/Left', 'Tapping/Right']

    Text(42.722222222222214, 0.5, 'Amplitude')



.. GENERATED FROM PYTHON SOURCE LINES 239-251

Fit GLM to subset of data and estimate response for each experimental condition
-------------------------------------------------------------------------------

.. sidebar:: Relevant literature

   Huppert TJ. Commentary on the statistical properties of noise and its
   implication on general linear models in functional near-infrared
   spectroscopy. Neurophotonics. 2016;3(1)

We run a GLM fit for the data and experiment matrix.
First we analyse just the first two channels which correspond to HbO and HbR
of a single source detector pair.

.. GENERATED FROM PYTHON SOURCE LINES 252-257

.. code-block:: default


    data_subset = raw_haemo.copy().pick(picks=range(2))
    glm_est = run_GLM(data_subset, design_matrix)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /tmp/tmp9v0pzc_n/3f2cf6f0304bd84837ddfbfd191e70aadfc335f1/examples/general/plot_11_hrf_measured.py:254: DeprecationWarning: "run_GLM" has been deprecated in favor of the more comprehensive run_glm function, and will be removed in v1.0.0. See the changelog for further details.
      glm_est = run_GLM(data_subset, design_matrix)




.. GENERATED FROM PYTHON SOURCE LINES 258-264

We then display the results. Note that the control condition sits
around zero
and that the HbO is positive and larger than the HbR, this is to be expected.
Further, we note that for this channel the response to tapping on the
right hand is larger than the left. And the values are similar to what
is seen in the epoching tutorial.

.. GENERATED FROM PYTHON SOURCE LINES 265-274

.. code-block:: default


    plt.scatter(design_matrix.columns[:3], glm_est['S1_D1 hbo'].theta[:3] * 1e6)
    plt.scatter(design_matrix.columns[:3], glm_est['S1_D1 hbr'].theta[:3] * 1e6)
    plt.xlabel("Experiment Condition")
    plt.ylabel("Haemoglobin (μM)")
    plt.legend(["Oxyhaemoglobin", "Deoxyhaemoglobin"])
    plt.hlines([0.0], 0, 2)





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_005.png
   :alt: plot 11 hrf measured
   :srcset: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.collections.LineCollection object at 0x7f821ee40d60>



.. GENERATED FROM PYTHON SOURCE LINES 275-284

Fit GLM to all data and view topographic distribution
-----------------------------------------------------

Lastly we can run the GLM analysis on all sensors and plot the result on a
topomap.
We see the same result as in the MNE tutorial,
that activation is largest
contralateral to the tapping side. Also note that HbR tends to be the
negative of HbO as expected.

.. GENERATED FROM PYTHON SOURCE LINES 284-291

.. code-block:: default


    glm_est = run_GLM(raw_haemo, design_matrix)
    plot_glm_topo(raw_haemo, glm_est, design_matrix,
                  requested_conditions=['Tapping/Left',
                                        'Tapping/Right'])





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_006.png
   :alt: Tapping/Left, Tapping/Right, Tapping/Left, Tapping/Right
   :srcset: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /tmp/tmp9v0pzc_n/3f2cf6f0304bd84837ddfbfd191e70aadfc335f1/examples/general/plot_11_hrf_measured.py:285: DeprecationWarning: "run_GLM" has been deprecated in favor of the more comprehensive run_glm function, and will be removed in v1.0.0. See the changelog for further details.
      glm_est = run_GLM(raw_haemo, design_matrix)
    /tmp/tmp9v0pzc_n/3f2cf6f0304bd84837ddfbfd191e70aadfc335f1/examples/general/plot_11_hrf_measured.py:286: DeprecationWarning: "plot_glm_topo" has been deprecated in favor of the more comprehensive GLM class and will be removed in v1.0.0. Use the RegressionResults class "plot_topo()" method instead.
      plot_glm_topo(raw_haemo, glm_est, design_matrix,

    <Figure size 1200x700 with 6 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 292-311

Note that the topographic visualisation is a high level representation
of the underlying data. This visual representation fits a smoothed surface
to the data and makes many assumptions including that the data is
spatially smooth and that the sensors sufficiently cover the scalp surface.
These assumptions can be violated with fNIRS due to the improved spatial
sensitivity (relative to EEG) and typically low number of sensors that are
unevenly distributed over the scalp.
As such, researchers should understand the underlying data and ensure that
the figure accurately reflects the effect of interest.

As an example of how the topoplot can be deceiving, we replot
the `Tapping/Right` condition from above for each hemisphere
separately. When both hemisphere are plotted together (left),
the function smooths
the large space between sensors, making the activity on the left hemisphere
smear towards the center and appear larger than the underlying data shows.
When each hemisphere is plotted independently (right) it becomes immediately
apparent that the data does not indicate that activity spreads across
the center of the head.

.. GENERATED FROM PYTHON SOURCE LINES 312-330

.. code-block:: default


    fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(10, 6),
                             gridspec_kw=dict(width_ratios=[0.92, 1]))

    plot_glm_topo(raw_haemo.copy().pick(picks="hbo"), glm_est, design_matrix,
                  axes=axes[0], colorbar=False,
                  requested_conditions=['Tapping/Right'])
    plot_glm_topo(raw_haemo.copy().pick(picks="hbo").pick(picks=range(10)),
                  glm_est, design_matrix, vmin=-16, vmax=16, axes=axes[1],
                  requested_conditions=['Tapping/Right'], colorbar=False)
    plot_glm_topo(raw_haemo.copy().pick(picks="hbo").pick(picks=range(10, 20)),
                  glm_est, design_matrix, axes=axes[1], vmin=-16, vmax=16,
                  requested_conditions=['Tapping/Right'])

    axes[0].set_title("Smoothed across hemispheres")
    axes[1].set_title("Hemispheres plotted independently")





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_007.png
   :alt: Smoothed across hemispheres, Hemispheres plotted independently
   :srcset: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /tmp/tmp9v0pzc_n/3f2cf6f0304bd84837ddfbfd191e70aadfc335f1/examples/general/plot_11_hrf_measured.py:316: DeprecationWarning: "plot_glm_topo" has been deprecated in favor of the more comprehensive GLM class and will be removed in v1.0.0. Use the RegressionResults class "plot_topo()" method instead.
      plot_glm_topo(raw_haemo.copy().pick(picks="hbo"), glm_est, design_matrix,
    /tmp/tmp9v0pzc_n/3f2cf6f0304bd84837ddfbfd191e70aadfc335f1/examples/general/plot_11_hrf_measured.py:316: RuntimeWarning: Reducing GLM results to match MNE data
      plot_glm_topo(raw_haemo.copy().pick(picks="hbo"), glm_est, design_matrix,
    /tmp/tmp9v0pzc_n/3f2cf6f0304bd84837ddfbfd191e70aadfc335f1/examples/general/plot_11_hrf_measured.py:319: DeprecationWarning: "plot_glm_topo" has been deprecated in favor of the more comprehensive GLM class and will be removed in v1.0.0. Use the RegressionResults class "plot_topo()" method instead.
      plot_glm_topo(raw_haemo.copy().pick(picks="hbo").pick(picks=range(10)),
    /tmp/tmp9v0pzc_n/3f2cf6f0304bd84837ddfbfd191e70aadfc335f1/examples/general/plot_11_hrf_measured.py:319: RuntimeWarning: Reducing GLM results to match MNE data
      plot_glm_topo(raw_haemo.copy().pick(picks="hbo").pick(picks=range(10)),
    /tmp/tmp9v0pzc_n/3f2cf6f0304bd84837ddfbfd191e70aadfc335f1/examples/general/plot_11_hrf_measured.py:322: DeprecationWarning: "plot_glm_topo" has been deprecated in favor of the more comprehensive GLM class and will be removed in v1.0.0. Use the RegressionResults class "plot_topo()" method instead.
      plot_glm_topo(raw_haemo.copy().pick(picks="hbo").pick(picks=range(10, 20)),
    /tmp/tmp9v0pzc_n/3f2cf6f0304bd84837ddfbfd191e70aadfc335f1/examples/general/plot_11_hrf_measured.py:322: RuntimeWarning: Reducing GLM results to match MNE data
      plot_glm_topo(raw_haemo.copy().pick(picks="hbo").pick(picks=range(10, 20)),

    Text(0.5, 1.0, 'Hemispheres plotted independently')



.. GENERATED FROM PYTHON SOURCE LINES 331-336

Analyse regions of interest
---------------------------

Or alternatively we can summarise the responses across regions of interest
for each condition. And you can plot it with your favorite software.

.. GENERATED FROM PYTHON SOURCE LINES 336-350

.. code-block:: default


    left = [[1, 1], [1, 2], [1, 3], [2, 1], [2, 3],
            [2, 4], [3, 2], [3, 3], [4, 3], [4, 4]]
    right = [[5, 5], [5, 6], [5, 7], [6, 5], [6, 7],
             [6, 8], [7, 6], [7, 7], [8, 7], [8, 8]]

    groups = dict(Left_ROI=picks_pair_to_idx(raw_haemo, left),
                  Right_ROI=picks_pair_to_idx(raw_haemo, right))

    df = pd.DataFrame()
    for idx, col in enumerate(design_matrix.columns[:3]):
        df = df.append(glm_region_of_interest(glm_est, groups, idx, col))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /tmp/tmp9v0pzc_n/3f2cf6f0304bd84837ddfbfd191e70aadfc335f1/examples/general/plot_11_hrf_measured.py:347: DeprecationWarning: "glm_region_of_interest" has been deprecated in favor of the more comprehensive GLM class and will be removed in v1.0.0. Use the RegressionResults class "region_of_interest_dataframe()" method instead.
      df = df.append(glm_region_of_interest(glm_est, groups, idx, col))
    /tmp/tmp9v0pzc_n/3f2cf6f0304bd84837ddfbfd191e70aadfc335f1/examples/general/plot_11_hrf_measured.py:347: DeprecationWarning: "glm_region_of_interest" has been deprecated in favor of the more comprehensive GLM class and will be removed in v1.0.0. Use the RegressionResults class "region_of_interest_dataframe()" method instead.
      df = df.append(glm_region_of_interest(glm_est, groups, idx, col))
    /tmp/tmp9v0pzc_n/3f2cf6f0304bd84837ddfbfd191e70aadfc335f1/examples/general/plot_11_hrf_measured.py:347: DeprecationWarning: "glm_region_of_interest" has been deprecated in favor of the more comprehensive GLM class and will be removed in v1.0.0. Use the RegressionResults class "region_of_interest_dataframe()" method instead.
      df = df.append(glm_region_of_interest(glm_est, groups, idx, col))




.. GENERATED FROM PYTHON SOURCE LINES 351-359

Compute contrasts
-----------------

We can also define a contrast as described in
`Nilearn docs <http://nilearn.github.io/auto_examples/04_glm_first_level/plot_localizer_surface_analysis.html>`_
and plot it.
Here we contrast the response to tapping on the left hand with the response
from tapping on the right hand.

.. GENERATED FROM PYTHON SOURCE LINES 360-369

.. code-block:: default


    contrast_matrix = np.eye(design_matrix.shape[1])
    basic_conts = dict([(column, contrast_matrix[i])
                       for i, column in enumerate(design_matrix.columns)])
    contrast_LvR = basic_conts['Tapping/Left'] - basic_conts['Tapping/Right']
    contrast = mne_nirs.statistics.compute_contrast(glm_est, contrast_LvR)
    mne_nirs.visualisation.plot_glm_contrast_topo(raw_haemo, contrast)





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_008.png
   :alt: Oxyhaemoglobin, Deoxyhaemoglobin
   :srcset: /auto_examples/general/images/sphx_glr_plot_11_hrf_measured_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /tmp/tmp9v0pzc_n/3f2cf6f0304bd84837ddfbfd191e70aadfc335f1/examples/general/plot_11_hrf_measured.py:365: DeprecationWarning: "compute_contrast" has been deprecated in favor of the more comprehensive GLM class and will be removed in v1.0.0. Use the ResultsGLM class "compute_contrast()" method instead.
      contrast = mne_nirs.statistics.compute_contrast(glm_est, contrast_LvR)
    /tmp/tmp9v0pzc_n/3f2cf6f0304bd84837ddfbfd191e70aadfc335f1/examples/general/plot_11_hrf_measured.py:366: DeprecationWarning: "plot_glm_contrast_topo" has been deprecated in favor of the more comprehensive GLM class and will be removed in v1.0.0. Use the ContrastResults class "plot_topo()" method instead.
      mne_nirs.visualisation.plot_glm_contrast_topo(raw_haemo, contrast)

    <Figure size 1200x700 with 3 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 370-384

Export Results
---------------

.. sidebar:: Relevant literature

   Wickham, Hadley. "Tidy data." Journal of Statistical Software 59.10 (2014): 1-23.

Here we export the data in a tidy pandas data frame.
We export the GLM results for every channel and condition.
Data is exported in long format by default.
However, a helper function is also provided to convert the long data to wide format.
The long to wide conversion also adds some additional derived data, such as
if a significant response (p<0.05) was observed, which sensor and detector is
in the channel, which chroma, etc.

.. GENERATED FROM PYTHON SOURCE LINES 384-388

.. code-block:: default


    df = glm_to_tidy(raw_haemo, glm_est, design_matrix)









.. GENERATED FROM PYTHON SOURCE LINES 389-396

Determine true and false positive rates
---------------------------------------

We can query the exported data frames to determine the true and false
positive rates. Note: optodes cover a greater region than just the
motor cortex, so we dont expect 100% of channels to detect responses to
the tapping, but we do expect 5% or less for the false positive rate.

.. GENERATED FROM PYTHON SOURCE LINES 396-403

.. code-block:: default


    (df
     .query('Condition in ["Control", "Tapping/Left", "Tapping/Right"]')
     .groupby(['Condition', 'Chroma'])
     .agg(['mean'])
     .drop(['df', 'mse', 'p_value', 't'], 1)
     )





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead tr th {
            text-align: left;
        }

        .dataframe thead tr:last-of-type th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr>
          <th></th>
          <th>variable</th>
          <th>se</th>
          <th>theta</th>
          <th>Source</th>
          <th>Detector</th>
          <th>Significant</th>
        </tr>
        <tr>
          <th></th>
          <th></th>
          <th>mean</th>
          <th>mean</th>
          <th>mean</th>
          <th>mean</th>
          <th>mean</th>
        </tr>
        <tr>
          <th>Condition</th>
          <th>Chroma</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th rowspan="2" valign="top">Control</th>
          <th>hbo</th>
          <td>1.084555e-06</td>
          <td>-3.386871e-08</td>
          <td>5.561117e+17</td>
          <td>6.156712e+17</td>
          <td>0.00</td>
        </tr>
        <tr>
          <th>hbr</th>
          <td>6.083848e-07</td>
          <td>1.348140e-08</td>
          <td>5.561117e+17</td>
          <td>6.156712e+17</td>
          <td>0.00</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">Tapping/Left</th>
          <th>hbo</th>
          <td>1.100472e-06</td>
          <td>6.898189e-06</td>
          <td>5.561117e+17</td>
          <td>6.156712e+17</td>
          <td>0.90</td>
        </tr>
        <tr>
          <th>hbr</th>
          <td>6.173233e-07</td>
          <td>-3.039020e-06</td>
          <td>5.561117e+17</td>
          <td>6.156712e+17</td>
          <td>0.75</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">Tapping/Right</th>
          <th>hbo</th>
          <td>1.103144e-06</td>
          <td>7.604877e-06</td>
          <td>5.561117e+17</td>
          <td>6.156712e+17</td>
          <td>0.90</td>
        </tr>
        <tr>
          <th>hbr</th>
          <td>6.188749e-07</td>
          <td>-2.841256e-06</td>
          <td>5.561117e+17</td>
          <td>6.156712e+17</td>
          <td>0.80</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.318 seconds)

**Estimated memory usage:**  100 MB


.. _sphx_glr_download_auto_examples_general_plot_11_hrf_measured.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/rob-luke/mne-nirs-docker/main?filepath=examples/mne-nirs-website-examples/auto_examples/general/plot_11_hrf_measured.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_11_hrf_measured.py <plot_11_hrf_measured.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_11_hrf_measured.ipynb <plot_11_hrf_measured.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
