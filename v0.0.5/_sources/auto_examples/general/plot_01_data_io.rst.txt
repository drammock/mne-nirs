
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/general/plot_01_data_io.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_general_plot_01_data_io.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_general_plot_01_data_io.py:


.. _tut-importing-fnirs-data:

=================================
Importing data from fNIRS devices
=================================

.. note:: This tutorial is a mirror of the 
          (`MNE tutorial <https://mne.tools/dev/auto_tutorials/io/30_reading_fnirs_data.html>`__),
          and is reproduced in MNE-NIRS for convenience and so that all
          relevant material is easily accessible to users.
          
fNIRS devices consist of two kinds of optodes: light sources (AKA "emitters" or
"transmitters") and light detectors (AKA "receivers"). Channels are defined as
source-detector pairs, and channel locations are defined as the midpoint
between source and detector.

MNE-Python provides functions for reading fNIRS data and optode locations from
several file formats. Regardless of the device manufacturer or file format,
MNE-Python's fNIRS functions will internally store the measurement data and its
metadata in the same way (e.g., data values are always converted into SI
units). Supported measurement types include amplitude, optical density,
oxyhaemoglobin concentration, and deoxyhemoglobin concentration (for continuous
wave fNIRS), and additionally AC amplitude and phase (for
frequency domain fNIRS).

.. warning:: MNE-Python stores metadata internally with a specific structure,
             and internal functions expect specific naming conventions.
             Manual modification of channel names and metadata
             is not recommended.


.. _import-snirf:

*****************
Standardized data
*****************

SNIRF (.snirf)
==============

The Shared Near Infrared Spectroscopy Format
(`SNIRF <https://github.com/fNIRS/snirf/blob/master/snirf_specification.md>`__)
is designed by the fNIRS community in an effort to facilitate
sharing and analysis of fNIRS data. And is the official format of the
Society for functional near-infrared spectroscopy (SfNIRS).
SNIRF is the preferred format for reading data in to MNE-Python.
Data stored in the SNIRF format can be read in
using :func:`mne.io.read_raw_snirf`.

.. note:: The SNIRF format has provisions for many different types of fNIRS
          recordings. MNE-Python currently only supports reading continuous
          wave data stored in the .snirf format.


***********************
Continuous Wave Devices
***********************


.. _import-nirx:

NIRx (directory or hdr)
=======================

NIRx produce continuous wave fNIRS devices.
NIRx recordings can be read in using :func:`mne.io.read_raw_nirx`.
The NIRx device stores data directly to a directory with multiple file types,
MNE-Python extracts the appropriate information from each file.
MNE-Python only supports NIRx files recorded with NIRStar
version 15.0 and above.
MNE-Python supports reading data from NIRScout and NIRSport 1 devices.


.. _import-hitachi:

Hitachi (.csv)
==============

Hitachi produce continuous wave fNIRS devices.
Hitachi fNIRS recordings can be read using `mne.io.read_raw_hitachi`.
No optode information is stored so you'll need to set the montage manually,
see the Notes section of `mne.io.read_raw_hitachi`.


************************
Frequency Domain Devices
************************

.. _import-boxy:

BOXY (.txt)
===========

BOXY recordings can be read in using :func:`mne.io.read_raw_boxy`.
The BOXY software and ISS Imagent I and II devices are frequency domain
systems that store data in a single ``.txt`` file containing what they call
(with MNE-Python's name for that type of data in parens):

- DC
    All light collected by the detector (``fnirs_cw_amplitude``)
- AC
    High-frequency modulated light intensity (``fnirs_fd_ac_amplitude``)
- Phase
    Phase of the modulated light (``fnirs_fd_phase``)

DC data is stored as the type ``fnirs_cw_amplitude`` because it
collects both the modulated and any unmodulated light, and hence is analogous
to what is collected by continuous wave systems such as NIRx. This helps with
conformance to SNIRF standard types.

These raw data files can be saved by the acquisition devices as parsed or
unparsed ``.txt`` files, which affects how the data in the file is organised.
MNE-Python will read either file type and extract the raw DC, AC,
and Phase data. If triggers are sent using the ``digaux`` port of the
recording hardware, MNE-Python will also read the ``digaux`` data and
create annotations for any triggers.


******************
Custom Data Import
******************

Loading legacy data in CSV or TSV format
========================================

.. warning:: This method is not supported and users are discoraged to use it.
             You should convert your data to the
             `SNIRF <https://github.com/fNIRS/snirf>`_ format using the tools
             provided by the Society for functional Near-Infrared Spectroscopy,
             and then load it using :func:`mne.io.read_raw_snirf`.

fNIRS measurements may be stored in a non-standardised format that is not
supported by MNE-Python and cannot be converted easily into SNIRF.
This legacy data is often in CSV or TSV format,
we show here a way to load it even though it is not officially supported by
MNE-Python due to the lack of standardisation of the file format (the
naming and ordering of channels, the type and scaling of data, and
specification of sensor positions varies between each vendor). You will likely
have to adapt this depending on the system from which your CSV originated.

.. GENERATED FROM PYTHON SOURCE LINES 143-150

.. code-block:: default


    import numpy as np
    import pandas as pd
    import mne

    # sphinx_gallery_thumbnail_number = 1








.. GENERATED FROM PYTHON SOURCE LINES 151-155

First, we generate an example CSV file which will then be loaded in to
MNE-Python. This step would be skipped if you have actual data you wish to
load. We simulate 16 channels with 100 samples of data and save this to a
file called fnirs.csv.

.. GENERATED FROM PYTHON SOURCE LINES 155-159

.. code-block:: default


    pd.DataFrame(np.random.normal(size=(16, 100))).to_csv("fnirs.csv")









.. GENERATED FROM PYTHON SOURCE LINES 160-171

.. warning:: The channels must be ordered in haemoglobin pairs, such that for
             a single channel all the types are in subsequent indices. The
             type order must be 'hbo' then 'hbr'.
             The data below is already in the correct order and may be
             used as a template for how data must be stored.
             If the order that your data is stored is different to the
             mandatory formatting, then you must first read the data with
             channel naming according to the data structure, then reorder
             the channels to match the required format.

Next, we will load the example CSV file.

.. GENERATED FROM PYTHON SOURCE LINES 172-176

.. code-block:: default


    data = pd.read_csv('fnirs.csv')









.. GENERATED FROM PYTHON SOURCE LINES 177-184

Then, the metadata must be specified manually as the CSV file does not
contain information about channel names, types, sample rate etc.

.. warning:: In MNE-Python the naming of channels MUST follow the structure
             ``S#_D# type`` where # is replaced by the appropriate source and
             detector numbers and type is either ``hbo``, ``hbr`` or the
             wavelength.

.. GENERATED FROM PYTHON SOURCE LINES 184-196

.. code-block:: default


    ch_names = ['S1_D1 hbo', 'S1_D1 hbr', 'S2_D1 hbo', 'S2_D1 hbr',
                'S3_D1 hbo', 'S3_D1 hbr', 'S4_D1 hbo', 'S4_D1 hbr',
                'S5_D2 hbo', 'S5_D2 hbr', 'S6_D2 hbo', 'S6_D2 hbr',
                'S7_D2 hbo', 'S7_D2 hbr', 'S8_D2 hbo', 'S8_D2 hbr']
    ch_types = ['hbo', 'hbr', 'hbo', 'hbr',
                'hbo', 'hbr', 'hbo', 'hbr',
                'hbo', 'hbr', 'hbo', 'hbr',
                'hbo', 'hbr', 'hbo', 'hbr']
    sfreq = 10.  # in Hz









.. GENERATED FROM PYTHON SOURCE LINES 197-205

Finally, the data can be converted in to an MNE-Python data structure.
The metadata above is used to create an :class:`mne.Info` data structure,
and this is combined with the data to create an MNE-Python
:class:`~mne.io.Raw` object. For more details on the info structure
see :ref:`tut-info-class`, and for additional details on how continuous data
is stored in MNE-Python see :ref:`tut-raw-class`.
For a more extensive description of how to create MNE-Python data structures
from raw array data see :ref:`tut_creating_data_structures`.

.. GENERATED FROM PYTHON SOURCE LINES 205-210

.. code-block:: default


    info = mne.create_info(ch_names=ch_names, ch_types=ch_types, sfreq=sfreq)
    raw = mne.io.RawArray(data, info, verbose=True)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Creating RawArray with float64 data, n_channels=16, n_times=101
        Range : 0 ... 100 =      0.000 ...    10.000 secs
    Ready.




.. GENERATED FROM PYTHON SOURCE LINES 211-232

Applying standard sensor locations to imported data
---------------------------------------------------

Having information about optode locations may assist in your analysis.
Beyond the general benefits this provides (e.g. creating regions of interest,
etc), this is may be particularly important for fNIRS as information about
the optode locations is required to convert the optical density data in to an
estimate of the haemoglobin concentrations.
MNE-Python provides methods to load standard sensor configurations
(montages) from some vendors, and this is demonstrated below.
Some handy tutorials for understanding sensor locations, coordinate systems,
and how to store and view this information in MNE-Python are:
:ref:`tut-sensor-locations`, :ref:`plot_source_alignment`, and
:ref:`ex-eeg-on-scalp`.

Below is an example of how to load the optode positions for an Artinis
OctaMon device.

.. note:: It is also possible to create a custom montage from a file for
          fNIRS with :func:`mne.channels.read_custom_montage` by setting
          ``coord_frame`` to ``'mri'``.

.. GENERATED FROM PYTHON SOURCE LINES 232-240

.. code-block:: default


    montage = mne.channels.make_standard_montage('artinis-octamon')
    raw.set_montage(montage)

    # View the position of optodes in 2D to confirm the positions are correct.
    raw.plot_sensors()





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_01_data_io_001.png
   :alt: plot 01 data io
   :srcset: /auto_examples/general/images/sphx_glr_plot_01_data_io_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <Figure size 640x640 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 241-246

To validate the positions were loaded correctly it is also possible to view
the location of the sources (red), detectors (black), and channels (white
lines and orange dots) in a 3D representation.
The ficiduals are marked in blue, green and red.
See :ref:`plot_source_alignment` for more details.

.. GENERATED FROM PYTHON SOURCE LINES 246-259

.. code-block:: default


    subjects_dir = mne.datasets.sample.data_path() + '/subjects'
    mne.datasets.fetch_fsaverage(subjects_dir=subjects_dir)

    trans = mne.channels.compute_native_head_t(montage)

    fig = mne.viz.create_3d_figure(size=(800, 600), bgcolor='white')
    fig = mne.viz.plot_alignment(
        raw.info, trans=trans, subject='fsaverage', subjects_dir=subjects_dir,
        surfaces=['brain', 'head'], coord_frame='mri', dig=True, show_axes=True,
        fnirs=['channels', 'pairs', 'sources', 'detectors'], fig=fig)
    mne.viz.set_3d_view(figure=fig, azimuth=90, elevation=90, distance=0.5,
                        focalpoint=(0., -0.01, 0.02))



.. image-sg:: /auto_examples/general/images/sphx_glr_plot_01_data_io_002.png
   :alt: plot 01 data io
   :srcset: /auto_examples/general/images/sphx_glr_plot_01_data_io_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    16 files missing from root.txt in /home/runner/mne_data/MNE-sample-data/subjects
    Downloading missing files remotely
    Downloading https://files.osf.io/v1/resources/rxvq7/providers/osfstorage/5cbdba4ef2be3c0019091890?revision=2&action=download&direct&version=2 (186.7 MB)
      0%|          | Downloading : 0.00/187M [00:00<?,        ?B/s]      0%|          | Downloading : 504k/187M [00:00<00:06,    29.7MB/s]      1%|          | Downloading : 1.49M/187M [00:00<00:04,    40.9MB/s]      1%|1         | Downloading : 2.49M/187M [00:00<00:04,    45.0MB/s]      2%|2         | Downloading : 4.49M/187M [00:00<00:03,    54.9MB/s]      3%|3         | Downloading : 6.49M/187M [00:00<00:03,    60.1MB/s]      5%|4         | Downloading : 8.49M/187M [00:00<00:03,    62.1MB/s]      6%|5         | Downloading : 10.5M/187M [00:00<00:02,    65.6MB/s]      7%|6         | Downloading : 12.5M/187M [00:00<00:02,    67.1MB/s]      8%|7         | Downloading : 14.5M/187M [00:00<00:02,    69.3MB/s]      9%|8         | Downloading : 16.5M/187M [00:00<00:02,    70.7MB/s]     11%|#         | Downloading : 20.5M/187M [00:00<00:02,    79.3MB/s]     12%|#2        | Downloading : 22.5M/187M [00:00<00:02,    80.3MB/s]     13%|#3        | Downloading : 24.5M/187M [00:00<00:02,    68.6MB/s]     15%|#5        | Downloading : 28.5M/187M [00:00<00:02,    77.2MB/s]     17%|#7        | Downloading : 32.5M/187M [00:00<00:02,    80.5MB/s]     20%|#9        | Downloading : 36.5M/187M [00:00<00:02,    78.3MB/s]     22%|##1       | Downloading : 40.5M/187M [00:00<00:01,    78.2MB/s]     24%|##3       | Downloading : 44.5M/187M [00:00<00:01,    77.1MB/s]     26%|##5       | Downloading : 48.5M/187M [00:00<00:01,    75.9MB/s]     28%|##8       | Downloading : 52.5M/187M [00:00<00:01,    76.9MB/s]     30%|###       | Downloading : 56.5M/187M [00:00<00:01,    77.5MB/s]     32%|###2      | Downloading : 60.5M/187M [00:00<00:01,    79.4MB/s]     35%|###4      | Downloading : 64.5M/187M [00:00<00:01,    81.8MB/s]     37%|###6      | Downloading : 68.5M/187M [00:00<00:01,    84.6MB/s]     39%|###8      | Downloading : 72.5M/187M [00:00<00:01,    86.1MB/s]     41%|####      | Downloading : 76.5M/187M [00:00<00:01,    88.0MB/s]     43%|####3     | Downloading : 80.5M/187M [00:00<00:01,    91.1MB/s]     45%|####5     | Downloading : 84.5M/187M [00:01<00:01,    94.2MB/s]     47%|####7     | Downloading : 88.5M/187M [00:01<00:01,    95.4MB/s]     50%|####9     | Downloading : 92.5M/187M [00:01<00:01,    97.1MB/s]     52%|#####1    | Downloading : 96.5M/187M [00:01<00:00,    97.9MB/s]     54%|#####3    | Downloading : 100M/187M [00:01<00:00,    98.6MB/s]      56%|#####5    | Downloading : 104M/187M [00:01<00:00,    99.7MB/s]     58%|#####8    | Downloading : 108M/187M [00:01<00:00,     100MB/s]     60%|######    | Downloading : 112M/187M [00:01<00:00,    99.7MB/s]     62%|######2   | Downloading : 116M/187M [00:01<00:00,     100MB/s]     65%|######4   | Downloading : 120M/187M [00:01<00:00,     100MB/s]     67%|######6   | Downloading : 124M/187M [00:01<00:00,     102MB/s]     69%|######8   | Downloading : 128M/187M [00:01<00:00,     104MB/s]     71%|#######   | Downloading : 132M/187M [00:01<00:00,     106MB/s]     73%|#######3  | Downloading : 136M/187M [00:01<00:00,     107MB/s]     75%|#######5  | Downloading : 140M/187M [00:01<00:00,     107MB/s]     77%|#######7  | Downloading : 144M/187M [00:01<00:00,     107MB/s]     80%|#######9  | Downloading : 148M/187M [00:01<00:00,     107MB/s]     82%|########1 | Downloading : 152M/187M [00:01<00:00,     106MB/s]     84%|########3 | Downloading : 156M/187M [00:01<00:00,     103MB/s]     86%|########5 | Downloading : 160M/187M [00:01<00:00,     103MB/s]     88%|########8 | Downloading : 164M/187M [00:01<00:00,     102MB/s]     90%|######### | Downloading : 168M/187M [00:01<00:00,     102MB/s]     92%|#########2| Downloading : 172M/187M [00:01<00:00,     103MB/s]     95%|#########4| Downloading : 176M/187M [00:01<00:00,     104MB/s]     97%|#########6| Downloading : 180M/187M [00:01<00:00,     104MB/s]     99%|#########8| Downloading : 184M/187M [00:01<00:00,     105MB/s]    100%|##########| Downloading : 187M/187M [00:01<00:00,    98.4MB/s]
    Verifying hash 5133fe92b7b8f03ae19219d5f46e4177.
    File saved as /tmp/tmp_5f0qm2r/temp.zip.

    Extracting missing files
    Successfully extracted 16 files
    10 files missing from bem.txt in /home/runner/mne_data/MNE-sample-data/subjects/fsaverage
    Downloading missing files remotely
    Downloading https://files.osf.io/v1/resources/rxvq7/providers/osfstorage/5cbdb9f5353c58001aa02025?revision=4&action=download&direct&version=4 (227.8 MB)
      0%|          | Downloading : 0.00/228M [00:00<?,        ?B/s]      0%|          | Downloading : 184k/228M [00:00<00:20,    11.4MB/s]      0%|          | Downloading : 568k/228M [00:00<00:13,    17.7MB/s]      1%|1         | Downloading : 2.30M/228M [00:00<00:05,    43.0MB/s]      2%|2         | Downloading : 5.30M/228M [00:00<00:03,    64.3MB/s]      4%|4         | Downloading : 9.30M/228M [00:00<00:02,    84.7MB/s]      6%|5         | Downloading : 13.3M/228M [00:00<00:02,    98.2MB/s]      8%|7         | Downloading : 17.3M/228M [00:00<00:02,     108MB/s]      9%|9         | Downloading : 21.3M/228M [00:00<00:01,     113MB/s]     11%|#1        | Downloading : 25.3M/228M [00:00<00:01,     118MB/s]     13%|#2        | Downloading : 29.3M/228M [00:00<00:01,     124MB/s]     14%|#3        | Downloading : 31.3M/228M [00:00<00:01,     124MB/s]     15%|#4        | Downloading : 33.3M/228M [00:00<00:01,     124MB/s]     16%|#6        | Downloading : 37.3M/228M [00:00<00:01,     128MB/s]     18%|#8        | Downloading : 41.3M/228M [00:00<00:01,     129MB/s]     20%|#9        | Downloading : 45.3M/228M [00:00<00:01,     131MB/s]     21%|##        | Downloading : 47.3M/228M [00:00<00:01,     131MB/s]     22%|##1       | Downloading : 49.3M/228M [00:00<00:01,     131MB/s]     23%|##3       | Downloading : 53.3M/228M [00:00<00:01,     133MB/s]     25%|##5       | Downloading : 57.3M/228M [00:00<00:01,     130MB/s]     26%|##6       | Downloading : 59.3M/228M [00:00<00:01,     125MB/s]     27%|##6       | Downloading : 61.3M/228M [00:00<00:01,     125MB/s]     29%|##8       | Downloading : 65.3M/228M [00:00<00:01,     127MB/s]     30%|##9       | Downloading : 67.3M/228M [00:00<00:01,     127MB/s]     30%|###       | Downloading : 69.3M/228M [00:00<00:01,     125MB/s]     31%|###1      | Downloading : 71.3M/228M [00:00<00:01,     121MB/s]     32%|###2      | Downloading : 73.3M/228M [00:00<00:01,     119MB/s]     34%|###3      | Downloading : 77.3M/228M [00:00<00:01,     121MB/s]     35%|###4      | Downloading : 79.3M/228M [00:00<00:01,     120MB/s]     36%|###5      | Downloading : 81.3M/228M [00:00<00:01,     119MB/s]     37%|###6      | Downloading : 83.3M/228M [00:00<00:01,     119MB/s]     37%|###7      | Downloading : 85.3M/228M [00:00<00:01,     118MB/s]     38%|###8      | Downloading : 87.3M/228M [00:00<00:01,     118MB/s]     39%|###9      | Downloading : 89.3M/228M [00:00<00:01,     114MB/s]     40%|####      | Downloading : 91.3M/228M [00:00<00:01,     112MB/s]     42%|####1     | Downloading : 95.3M/228M [00:00<00:01,     114MB/s]     43%|####2     | Downloading : 97.3M/228M [00:00<00:01,     113MB/s]     44%|####3     | Downloading : 99.3M/228M [00:00<00:01,     114MB/s]     44%|####4     | Downloading : 101M/228M [00:00<00:01,     113MB/s]      46%|####6     | Downloading : 105M/228M [00:00<00:01,     113MB/s]     47%|####7     | Downloading : 107M/228M [00:00<00:01,     111MB/s]     48%|####7     | Downloading : 109M/228M [00:00<00:01,     111MB/s]     49%|####8     | Downloading : 111M/228M [00:01<00:01,     109MB/s]     50%|####9     | Downloading : 113M/228M [00:01<00:01,     107MB/s]     52%|#####1    | Downloading : 117M/228M [00:01<00:01,     109MB/s]     52%|#####2    | Downloading : 119M/228M [00:01<00:01,     109MB/s]     53%|#####3    | Downloading : 121M/228M [00:01<00:01,     110MB/s]     55%|#####5    | Downloading : 125M/228M [00:01<00:00,     113MB/s]     57%|#####6    | Downloading : 129M/228M [00:01<00:00,     116MB/s]     58%|#####7    | Downloading : 131M/228M [00:01<00:00,     116MB/s]     59%|#####9    | Downloading : 135M/228M [00:01<00:00,     117MB/s]     61%|######1   | Downloading : 139M/228M [00:01<00:00,     114MB/s]     62%|######2   | Downloading : 141M/228M [00:01<00:00,     111MB/s]     63%|######2   | Downloading : 143M/228M [00:01<00:00,     111MB/s]     64%|######3   | Downloading : 145M/228M [00:01<00:00,     112MB/s]     65%|######4   | Downloading : 147M/228M [00:01<00:00,     112MB/s]     66%|######6   | Downloading : 151M/228M [00:01<00:00,     113MB/s]     68%|######8   | Downloading : 155M/228M [00:01<00:00,     115MB/s]     70%|######9   | Downloading : 159M/228M [00:01<00:00,     117MB/s]     72%|#######1  | Downloading : 163M/228M [00:01<00:00,     118MB/s]     73%|#######2  | Downloading : 165M/228M [00:01<00:00,     118MB/s]     73%|#######3  | Downloading : 167M/228M [00:01<00:00,     117MB/s]     74%|#######4  | Downloading : 169M/228M [00:01<00:00,     116MB/s]     75%|#######5  | Downloading : 171M/228M [00:01<00:00,     115MB/s]     77%|#######6  | Downloading : 175M/228M [00:01<00:00,     116MB/s]     79%|#######8  | Downloading : 179M/228M [00:01<00:00,     116MB/s]     80%|#######9  | Downloading : 181M/228M [00:01<00:00,     115MB/s]     80%|########  | Downloading : 183M/228M [00:01<00:00,     115MB/s]     81%|########1 | Downloading : 185M/228M [00:01<00:00,     112MB/s]     82%|########2 | Downloading : 187M/228M [00:01<00:00,     111MB/s]     83%|########3 | Downloading : 189M/228M [00:01<00:00,     111MB/s]     84%|########3 | Downloading : 191M/228M [00:01<00:00,     111MB/s]     85%|########4 | Downloading : 193M/228M [00:01<00:00,     110MB/s]     86%|########5 | Downloading : 195M/228M [00:01<00:00,     106MB/s]     87%|########6 | Downloading : 197M/228M [00:01<00:00,     105MB/s]     89%|########9 | Downloading : 203M/228M [00:01<00:00,     110MB/s]     91%|#########1| Downloading : 207M/228M [00:01<00:00,     114MB/s]     93%|#########2| Downloading : 211M/228M [00:01<00:00,     114MB/s]     95%|#########4| Downloading : 215M/228M [00:01<00:00,     114MB/s]     96%|#########6| Downloading : 219M/228M [00:02<00:00,     114MB/s]     98%|#########8| Downloading : 223M/228M [00:02<00:00,     114MB/s]    100%|#########9| Downloading : 227M/228M [00:02<00:00,     114MB/s]    100%|##########| Downloading : 228M/228M [00:02<00:00,     115MB/s]
    Verifying hash b31509cdcf7908af6a83dc5ee8f49fb1.
    File saved as /tmp/tmpc2b8jicg/temp.zip.

    Extracting missing files
    Successfully extracted 10 files
    Using outer_skin.surf for head surface.
    Channel types:: hbo: 8, hbr: 8





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.746 seconds)

**Estimated memory usage:**  182 MB


.. _sphx_glr_download_auto_examples_general_plot_01_data_io.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/rob-luke/mne-nirs-docker/main?filepath=examples/mne-nirs-website-examples/auto_examples/general/plot_01_data_io.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_01_data_io.py <plot_01_data_io.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_01_data_io.ipynb <plot_01_data_io.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
